{"pageProps":{"source":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Recentemente o \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"power button\"), \" do meu \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"smartphone\"), \" estragou e eu tive que\\ncome\\xE7ar a me virar sem ele. A princ\\xEDpio, naturalmente, eu n\\xE3o conseguia\\ndesligar a tela e o tempo de inatividade antes do seu desligamento era de 5\\nminutos - o que \\xE9 muito tempo para se esperar antes de coloc\\xE1-lo no bolso.\\nDesse modo, antes de eu querer concertar o dispositivo, procurar um aplicativo\\nou qualquer coisa que seja para resolver o meu problema, decidi configurar o\\ntempo m\\xE1ximo de inatividade para somente 15 segundos.\"), mdx(\"p\", null, \"Ou seja: se eu n\\xE3o tocar a tela em 15 segundos, ela desliga. Bem simples!\"), mdx(\"h2\", null, \"Problemas\"), mdx(\"p\", null, \"No entanto, notei alguns problemas ao fazer isso logo ap\\xF3s tentar ler alguns\\nartigos longos na \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"internet\"), \" pelo \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"browser\"), \", pois a tela sempre desligava\\ndurante a leitura, porque nesses casos o tempo sem tocar a tela do dispositivo\\naumenta - principalmente se voc\\xEA est\\xE1 lendo algum artigo onde h\\xE1 muitas\\nilustra\\xE7\\xF5es, f\\xF3rmulas ou c\\xF3digos que devem ser analisados por um tempinho um\\npouco maior. At\\xE9 que eu notei algo bem interessante que ocorria no aplicativo\\ndo \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.instapaper.com/\"\n  }), \"Instapaper\"), \", que al\\xE9m de lhe oferecer um vasto\\nn\\xFAmero de utilit\\xE1rios e personaliza\\xE7\\xE3o durante a leitura de um texto, tamb\\xE9m\\nimpede que a tela desligue enquanto voc\\xEA est\\xE1 a l\\xEA-lo, assim como quando voc\\xEA\\nassiste um video.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Obs.: O Instapaper \\xE9 um aplicativo que lhe permite salvar o texto principal\\nde um site, aplicativo ou qualquer coisa do g\\xEAnero para ler mais tarde, quando\\nestiver desconectado da internet por exemplo.\")), mdx(\"h2\", null, \"Solu\\xE7\\xF5es\"), mdx(\"p\", null, \"Depois de ver essa funcionalidade, fiquei me questionando se haveria alguma\\nforma de impedir que a tela desligue utilizando JavaScript dentro de um\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"browser\"), \". Fiz algumas pesquisas no Google e as duas primeiras coisas\\nrelevantes que encontrei foram: \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Wake Lock API\"), \" e \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"NoSleep.js\"), \".\"), mdx(\"p\", null, \"A primeira, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Wake Lock API\"), \", eu encontrei no artigo\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developers.google.com/web/updates/2018/12/wakelock\"\n  }), mdx(\"em\", {\n    parentName: \"a\"\n  }, \"I\\u2019m Awake! Stay Awake with the WakeLock API\")), \",\\ndo Pete LePage no Google Developers, que \\xE9 uma API para os navegadores que\\nbasicamente permite manter o \\\"dispositivo acordado\\\", s\\xF3 que ela ainda est\\xE1 em\\nprogresso e aparentemente funciona apenas no Google Chrome e com a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"flag\"), \"\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#enable-experimental-web-platform-features\"), \" habilitada nele, portanto, isso\\nainda n\\xE3o \\xE9 ainda nem um pouco \\xFAtil para os dias de hoje.\"), mdx(\"p\", null, \"A segunda, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/richtr/NoSleep.js\"\n  }), mdx(\"em\", {\n    parentName: \"a\"\n  }, \"NoSleep.js\")), \", \\xE9 uma\\nbiblioteca criada pelo Rich Tibbett que eu encontrei no GitHub e que lhe\\npermite fazer algo bem semelhante ao \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Wake Lock API\"), \", no entanto, com algo que\\nalguns podem chamar de gambiarra. O fato \\xE9 que uma tela n\\xE3o descansa se o\\nusu\\xE1rio estiver assistindo um v\\xEDdeo, certo?! Desse modo, o \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"NoSleep.js\"), \",\\nenquanto estiver ativado, apenas d\\xE1 \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"play\"), \" num video em segundo plano fazendo\\no navegador entender que o usu\\xE1rio est\\xE1 assistindo algo e evitando assim o\\ndesligamento dela. O video em quest\\xE3o n\\xE3o apresenta nenhum vest\\xEDgio de seu\\ncomportamento para o usu\\xE1rio, pois al\\xE9m de ser mudo nem chega a ser inserido na\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<body>\"), \" do HTML, al\\xE9m de ser muit\\xEDssimo leve.\"), mdx(\"h2\", null, \"Uso do NoSleep.js\"), mdx(\"p\", null, \"Usar essa biblioteca \\xE9 extremamente simples, onde voc\\xEA possui apenas dois\\nmodos: ativado e desativado. O primeiro faz com que a tela n\\xE3o descanse e o\\nsegundo, obviamente, deixa a tela no modo normal.\"), mdx(\"p\", null, \"\\xC9 poss\\xEDvel obter o NoSleep.js pelo \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/\"\n  }), \"NPM\"), \",\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://bower.io/\"\n  }), \"Bower\"), \"\\n(que j\\xE1 \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://snyk.io/blog/bower-is-dead/\"\n  }), \"foi descontinuado\"), \") ou\\ndiretamente pelo \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"download\"), \" do c\\xF3digo-fonte no GitHub.\"), mdx(\"p\", null, \"Depois de t\\xEA-lo instalado, antes de us\\xE1-lo voc\\xEA deve instanciar um objeto a\\npartir da classe  \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NoSleep\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"var noSleep = new NoSleep();\\n\")), mdx(\"p\", null, \"Ap\\xF3s isso, a vari\\xE1vel \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"noSleep\"), \" armazenar\\xE1 um objeto com dois m\\xE9todos:\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"enable\"), \" (para ativar) e \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"disable\"), \" (para desativar). Algo curioso e que\\ncertamente \\xE9 um ponto negativo dessa biblioteca \\xE9 a obrigatoriedade do m\\xE9todo\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"enable\"), \" ser chamado dentro de um\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.w3schools.com/jsref/dom_obj_event.asp\"\n  }), \"evento\"), \" de entrada do\\nusu\\xE1rio, como um \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"click\"), \". Por exemplo, supondo que \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"button\"), \" \\xE9 o elemento de um\\nbot\\xE3o qualquer da sua p\\xE1gina ent\\xE3o voc\\xEA deve fazer isso para ativar o\\nNoSleep.js:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"button.addEventListener('click', () => {\\n  noSleep.enable();\\n});\\n\")), mdx(\"p\", null, \"J\\xE1 para desativ\\xE1-lo, basta usar \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"noSleep.disable()\"), \" em qualquer lugar do\\nc\\xF3digo, n\\xE3o havendo a necessidade de estar encapsulado em um evento do usu\\xE1rio.\"), mdx(\"h2\", null, \"Conclus\\xE3o\"), mdx(\"p\", null, \"Voc\\xEA pode experimentar um\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://theuves-demos.github.io/no-sleep-demo/\"\n  }), \"exemplo aqui\"), \", observando que\\n\\xE9 extremamente aconselh\\xE1vel que seu dispositivo esteja com um tempo limite de\\ntela baixo, caso contr\\xE1rio voc\\xEA poder\\xE1 perder muito tempo esperando at\\xE9 cair a\\nfixa de que a demonstra\\xE7\\xE3o est\\xE1 funcionando.\"), mdx(\"p\", null, \"Esse \\xE9 um utilit\\xE1rio simples e que em alguns casos para determinados usu\\xE1rios\\npode n\\xE3o fazer absolutamente nenhuma diferen\\xE7a, mas que para outros, como foi\\no meu, pode fazer uma falta gigantesca, n\\xE3o somente para leitura dum texto (que\\ntalvez seja um caso mais incomum), mas tamb\\xE9m para jogos, p\\xE1ginas com anima\\xE7\\xF5es\\nou simples aplicativos como o de um cron\\xF4metro.\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Recentemente o <em>power button</em> do meu <em>smartphone</em> estragou e eu tive que\ncomeçar a me virar sem ele. A princípio, naturalmente, eu não conseguia\ndesligar a tela e o tempo de inatividade antes do seu desligamento era de 5\nminutos - o que é muito tempo para se esperar antes de colocá-lo no bolso.\nDesse modo, antes de eu querer concertar o dispositivo, procurar um aplicativo\nou qualquer coisa que seja para resolver o meu problema, decidi configurar o\ntempo máximo de inatividade para somente 15 segundos.</p><p>Ou seja: se eu não tocar a tela em 15 segundos, ela desliga. Bem simples!</p><h2>Problemas</h2><p>No entanto, notei alguns problemas ao fazer isso logo após tentar ler alguns\nartigos longos na <em>internet</em> pelo <em>browser</em>, pois a tela sempre desligava\ndurante a leitura, porque nesses casos o tempo sem tocar a tela do dispositivo\naumenta - principalmente se você está lendo algum artigo onde há muitas\nilustrações, fórmulas ou códigos que devem ser analisados por um tempinho um\npouco maior. Até que eu notei algo bem interessante que ocorria no aplicativo\ndo <a href=\"https://www.instapaper.com/\">Instapaper</a>, que além de lhe oferecer um vasto\nnúmero de utilitários e personalização durante a leitura de um texto, também\nimpede que a tela desligue enquanto você está a lê-lo, assim como quando você\nassiste um video.</p><blockquote><p>Obs.: O Instapaper é um aplicativo que lhe permite salvar o texto principal\nde um site, aplicativo ou qualquer coisa do gênero para ler mais tarde, quando\nestiver desconectado da internet por exemplo.</p></blockquote><h2>Soluções</h2><p>Depois de ver essa funcionalidade, fiquei me questionando se haveria alguma\nforma de impedir que a tela desligue utilizando JavaScript dentro de um\n<em>browser</em>. Fiz algumas pesquisas no Google e as duas primeiras coisas\nrelevantes que encontrei foram: <em>Wake Lock API</em> e <em>NoSleep.js</em>.</p><p>A primeira, <em>Wake Lock API</em>, eu encontrei no artigo\n<a href=\"https://developers.google.com/web/updates/2018/12/wakelock\"><em>I’m Awake! Stay Awake with the WakeLock API</em></a>,\ndo Pete LePage no Google Developers, que é uma API para os navegadores que\nbasicamente permite manter o &quot;dispositivo acordado&quot;, só que ela ainda está em\nprogresso e aparentemente funciona apenas no Google Chrome e com a <em>flag</em>\n<code>#enable-experimental-web-platform-features</code> habilitada nele, portanto, isso\nainda não é ainda nem um pouco útil para os dias de hoje.</p><p>A segunda, <a href=\"https://github.com/richtr/NoSleep.js\"><em>NoSleep.js</em></a>, é uma\nbiblioteca criada pelo Rich Tibbett que eu encontrei no GitHub e que lhe\npermite fazer algo bem semelhante ao <em>Wake Lock API</em>, no entanto, com algo que\nalguns podem chamar de gambiarra. O fato é que uma tela não descansa se o\nusuário estiver assistindo um vídeo, certo?! Desse modo, o <em>NoSleep.js</em>,\nenquanto estiver ativado, apenas dá <em>play</em> num video em segundo plano fazendo\no navegador entender que o usuário está assistindo algo e evitando assim o\ndesligamento dela. O video em questão não apresenta nenhum vestígio de seu\ncomportamento para o usuário, pois além de ser mudo nem chega a ser inserido na\n<code>&lt;body&gt;</code> do HTML, além de ser muitíssimo leve.</p><h2>Uso do NoSleep.js</h2><p>Usar essa biblioteca é extremamente simples, onde você possui apenas dois\nmodos: ativado e desativado. O primeiro faz com que a tela não descanse e o\nsegundo, obviamente, deixa a tela no modo normal.</p><p>É possível obter o NoSleep.js pelo <a href=\"https://www.npmjs.com/\">NPM</a>,\n<a href=\"https://bower.io/\">Bower</a>\n(que já <a href=\"https://snyk.io/blog/bower-is-dead/\">foi descontinuado</a>) ou\ndiretamente pelo <em>download</em> do código-fonte no GitHub.</p><p>Depois de tê-lo instalado, antes de usá-lo você deve instanciar um objeto a\npartir da classe  <code>NoSleep</code>.</p><pre><code class=\"language-javascript\">var noSleep = new NoSleep();\n</code></pre><p>Após isso, a variável <code>noSleep</code> armazenará um objeto com dois métodos:\n<code>enable</code> (para ativar) e <code>disable</code> (para desativar). Algo curioso e que\ncertamente é um ponto negativo dessa biblioteca é a obrigatoriedade do método\n<code>enable</code> ser chamado dentro de um\n<a href=\"https://www.w3schools.com/jsref/dom_obj_event.asp\">evento</a> de entrada do\nusuário, como um <code>click</code>. Por exemplo, supondo que <code>button</code> é o elemento de um\nbotão qualquer da sua página então você deve fazer isso para ativar o\nNoSleep.js:</p><pre><code class=\"language-javascript\">button.addEventListener(&#x27;click&#x27;, () =&gt; {\n  noSleep.enable();\n});\n</code></pre><p>Já para desativá-lo, basta usar <code>noSleep.disable()</code> em qualquer lugar do\ncódigo, não havendo a necessidade de estar encapsulado em um evento do usuário.</p><h2>Conclusão</h2><p>Você pode experimentar um\n<a href=\"https://theuves-demos.github.io/no-sleep-demo/\">exemplo aqui</a>, observando que\né extremamente aconselhável que seu dispositivo esteja com um tempo limite de\ntela baixo, caso contrário você poderá perder muito tempo esperando até cair a\nfixa de que a demonstração está funcionando.</p><p>Esse é um utilitário simples e que em alguns casos para determinados usuários\npode não fazer absolutamente nenhuma diferença, mas que para outros, como foi\no meu, pode fazer uma falta gigantesca, não somente para leitura dum texto (que\ntalvez seja um caso mais incomum), mas também para jogos, páginas com animações\nou simples aplicativos como o de um cronômetro.</p>","scope":{"title":"Impedindo que a tela desligue com JavaScript","date":"2019-05-07"}},"frontMatter":{"title":"Impedindo que a tela desligue com JavaScript","date":"2019-05-07"}},"__N_SSG":true}