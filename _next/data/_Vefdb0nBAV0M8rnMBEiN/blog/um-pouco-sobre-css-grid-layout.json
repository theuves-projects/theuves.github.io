{"pageProps":{"source":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"O CSS Grid Layout \\xE9 uma tecnologia do CSS que\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://caniuse.com/#feat=css-grid\"\n  }), \"desde 2017\"), \" est\\xE1 presente na maioria dos\\nprincipais navegadores modernos. Ela nos permite criar \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"layouts\"), \" baseados em\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"grids\"), \" de uma forma extremamente r\\xE1pida, f\\xE1cil e... padronizada. Apresentarei\\nrapidamente nesse artigo um pouco das principais coisas que voc\\xEA pode fazer\\ncom essa \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"feature\"), \".\"), mdx(\"h2\", null, \"Introdu\\xE7\\xE3o\"), mdx(\"p\", null, \"N\\xE3o h\\xE1 segredo algum para dar in\\xEDcio a um elemento simples. Para isso basta\\ncriar uma estrutura HTML com um \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"container\"), \" e alguns itens que far\\xE3o parte do\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"layout\"), \". Veja uma estrutura bem simples para come\\xE7ar:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<div class=\\\"grid\\\">\\n  <div class=\\\"item item-1\\\">Item 1</div>\\n  <div class=\\\"item item-2\\\">Item 2</div>\\n  <div class=\\\"item item-3\\\">Item 3</div>\\n  <div class=\\\"item item-4\\\">Item 4</div>\\n  <div class=\\\"item item-5\\\">Item 5</div>\\n  <div class=\\\"item item-6\\\">Item 6</div>\\n</div>\\n\")), mdx(\"p\", null, \"Ap\\xF3s isso, voc\\xEA ter\\xE1 duas op\\xE7\\xF5es para fazer com que o elemento \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".grid\"), \" seja\\numa \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"grid\"), \": ou voc\\xEA usa \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"display: grid\"), \" ou \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"display: inline-grid\"), \". A diferen\\xE7a\\nentre essas duas op\\xE7\\xF5es, pode-se dizer, que \\xE9 a mesma entre \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"block\"), \" e\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"inline-block\"), \".\"), mdx(\"p\", null, \"Para o exemplo usaremos somente \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"display: grid\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \".grid {\\n  display: grid;\\n}\\n\")), mdx(\"p\", null, \"Veja o resultado:\"), mdx(\"iframe\", {\n    src: \"https://codepen.io/theuves/embed/wRLZap?default-tab=css,result\"\n  }), mdx(\"h2\", null, \"Configura\\xE7\\xE3o b\\xE1sica do \", mdx(\"em\", {\n    parentName: \"h2\"\n  }, \"container\")), mdx(\"p\", null, \"Se voc\\xEA olhou o resultado do c\\xF3digo anterior, percebeu que n\\xE3o houve nada de\\ninteressante. Pelo contr\\xE1rio, tudo ficou como se voc\\xEA tivesse definido um\\nsimples \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"display: block\"), \", visto que todos os itens ficaram um embaixo do outro\\nsem nenhuma coluna definida \\u2013 posto que esse \\xE9 o principal objetivo do CSS Grid\\nLayout.\"), mdx(\"p\", null, \"Para que possamos montar a nossa \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"grid\"), \", antes devemos definir qual ser\\xE1 o seu\\nformato, por exemplo: 3 colunas \\xD7 2 linhas \\u2013 que \\xE9 o que ser\\xE1 usado nesse\\nexemplo. Depois disso, usa-se a propriedade \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"grid-template-columns\"), \" para\\ndefinir a quantidade de colunas e a largura de cada uma delas e\\nconsequentemente fazer a quebra de linhas que \\xE9 autom\\xE1tica.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \".grid {\\n  display: grid;\\n  grid-template-columns: 100px 200px 300px;\\n}\\n\")), mdx(\"p\", null, \"Isso \\xE9 bem intuitivo, onde percebe-se facilmente que haver\\xE1 tr\\xEAs colunas e que\\nelas ter\\xE3o, respectivamente, 100px, 200px e 300px. Veja o exemplo no CodePen:\"), mdx(\"iframe\", {\n    src: \"https://codepen.io/theuves/embed/yGdrJZ?default-tab=css,result\"\n  }), mdx(\"p\", null, \"No entanto, se voc\\xEA quisesse colunas com larguras iguais, relativas \\xE0 largura\\ndo \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"container\"), \" (onde, consequentemente, cada coluna teria cerca de 33,3% de\\nlargura), bastaria adicionar a propriedade \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"auto\"), \" para todas, ficando:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \".grid {\\n  display: grid;\\n  grid-template-columns: auto auto auto;\\n}\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"DICA:\"), \" Quando voc\\xEA tiver um caso como esse, no CSS Grid, voc\\xEA ter\\xE1 a\\npossibilidade de utilizar a fun\\xE7\\xE3o \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"repeat()\"), \" e economizar algumas dedadas no\\nteclado, al\\xE9m de deixar o c\\xF3digo mais atraente. Nesse caso em espec\\xEDfico\\npoderiamos ter usado \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"repeat(3, auto)\"), \". Veja mais sobre essa fun\\xE7\\xE3o no\\n\", \"[MDN web docs][mdn_repeat]\", \" (em ingl\\xEAs).\")), mdx(\"p\", null, \"Se tem \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"grid-template-columns\"), \", certamente deveria ter tamb\\xE9m\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"grid-template-rows\"), \". E tem! Com essa propriedade voc\\xEA basicamente definir\\xE1\\na altura de suas linhas. Sem segredos: \\xE9 o mesmo sistema das colunas.\"), mdx(\"h2\", null, \"Configura\\xE7\\xE3o b\\xE1sica dos itens\"), mdx(\"p\", null, \"Agora que foi apresentado algumas configura\\xE7\\xF5es para o \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"container\"), \" que abrigar\\xE1\\nos itens, \\xE9 importante saber qual configura\\xE7\\xE3o os itens podem ter. As\\npropriedades existentes para os itens do CSS Grid Layout se resumem\\nsimplesmente em defini\\xE7\\xF5es para a localiza\\xE7\\xE3o e o espa\\xE7o ocupado por eles.\\nDesse modo, por exemplo, voc\\xEA pode fazer com um que um item ocupe o espa\\xE7o de\\noutros itens tamb\\xE9m, permitindo, assim, que voc\\xEA n\\xE3o fique preso apenas \\xE0\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"containers\"), \" quadriculados.\"), mdx(\"p\", null, \"Para isso temos as seguintes propriedades:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"grid-row-start\"), \" - que recebe a linha vertical em que deve iniciar,\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"grid-row-end\"), \" - que recebe a linha vertical em que deve acabar,\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"grid-column-start\"), \" - que recebe a linha horizontal em que deve iniciar e\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"grid-column-end\"), \"- que recebe a linha horizontal em que deve acabar.\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"DICA:\"), \" H\\xE1 algumas formas abreviadas para tudo isso. Voc\\xEA pode usar somente\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"grid-row\")), \" ou\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"grid-column\")), \" e\\nreceber dois valores de \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"*-start\"), \" e \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"*-end\"), \" respectivamente. Ou voc\\xEA tamb\\xE9m pode\\nusar \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"grid-area\")), \"\\nque recebe respectivamente: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"*-row-start\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"*-column-start\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"*-row-end\"), \" e\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"*-column-end\"), \" separados por uma barra (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/\"), \"). Voc\\xEA pode entender melhor o\\nfuncionamento desses atalhos clicandos nos \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"links\"), \" e lendo a documenta\\xE7\\xE3o\\ndetalhada de cada um (em ingl\\xEAs).\")), mdx(\"p\", null, \"Veja um exemplo simples do que essas propriedades podem fazer:\"), mdx(\"iframe\", {\n    src: \"https://codepen.io/theuves/embed/oJrRWq?default-tab=css,result\"\n  }), mdx(\"p\", null, \"Observe que o \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"style\"), \" que define o comportamento do item 1 \\xE9:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \".item.item-1 {\\n  grid-row-start: 1;\\n  grid-row-end: 3;\\n}\\n\")), mdx(\"p\", null, \"Um c\\xF3digo como esse pode ser um pouco contra-intuitivo, pois veja que o\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"grid-row-end\"), \" \\xE9 3 enquanto s\\xF3 temos 2 linhas e n\\xE3o 3. Isso ocorre pois o valor\\nrecebido por essas propriedades n\\xE3o se referem \\xE0 linha DE cada item e sim \\xE0\\nlinha ENTRE cada item. Veja a ilustra\\xE7\\xE3o abaixo para entender o funcionamento\\ndesses tipos de linha:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://i.imgur.com/NccapEu.png\",\n    \"alt\": \"IFuncionamento das linhas\"\n  }))), mdx(\"p\", null, \"Desse modo, o c\\xF3digo do exemplo mais acima inicia entre a borda e o come\\xE7o da\\nlinha do item 1 e termina no final da linha do item 2.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"DICA\"), \": Para facilitar o entendimento de um c\\xF3digo como esse, poderiamos\\nter simplesmente usado \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"span\"), \" antes da linha do item. Por exemplo:\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"grid-row-end: span 2\"), \". Isso deixaria mais claro que deveria terminar na linha\\n2 dos itens.\")), mdx(\"h2\", null, \"Dist\\xE2ncia entre itens\"), mdx(\"p\", null, \"Se voc\\xEA prestou aten\\xE7\\xE3o no \\xFAltimo exemplo de c\\xF3digo no CodePen, viu que h\\xE1 um\\nespa\\xE7o entre os itens, certo?! Para distanciar um item de outro, voc\\xEA\\nintuitivamente poderia pensar em usar \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"margin\"), \" dentro deles, por\\xE9m, essa n\\xE3o\\nseria a melhor solu\\xE7\\xE3o para o problema. O CSS oferece as seguintes propriedades\\npara fazer isso padronizadamente:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-gap\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"grid-column-gap\")), \" - que distancia os itens das colunas\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-gap\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"grid-row-gap\")), \" - que distancia os itens das linhas e\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-gap\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"grid-gap\")), \" - que \\xE9 uma forma abreviada dos outros.\")), mdx(\"p\", null, \"Observe que essas propriedades devem ser definidas dentro do \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"container\"), \" e n\\xE3o\\ndentro dos itens. Al\\xE9m disso, tenha em mente que \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"grid-gap\"), \" pode receber um\\n\\xFAnico valor que ser\\xE1 usado tanto para a coluna quanto para a linha ou pode receber dois valores: um para a linha e outro para a coluna, respectivamente.\"), mdx(\"h2\", null, \"Alinhamento de itens\"), mdx(\"p\", null, \"O CSS tamb\\xE9m nos d\\xE1 a possibilidade de alinhar os itens\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"dentro do \", mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"container\")), \", tendo as propriedades \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"justify-content\"), \" (para o\\nalinhamento horizontal dos itens) e \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"align-content\"), \" (para o alinhamento\\nvertical dos itens). Contudo, essas propriedades n\\xE3o s\\xE3o exclusivas do CSS Grid\\nLayout. Veja no \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"MDN web docs\"), \" a documenta\\xE7\\xE3o delas e tenha uma experi\\xEAncia\\ninterativa do que cada valor pode fazer, acessando\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content\"\n  }), \"aqui\"), \"\\n(para \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"justify-content\"), \") e\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/align-content\"\n  }), \"aqui\"), \"\\n(para \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"align-content\"), \").\"), mdx(\"h2\", null, \"Nomeando itens\"), mdx(\"p\", null, \"Essa, sem d\\xFAvidas, \\xE9 a parte mais interessante do CSS Grid Layout, no qual,\\npodemos nomear cada item e faz\\xEA-los se posicionarem automaticamente no\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"container\"), \", sem a necessidade de configurar \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"grid-row\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"grid-column\"), \" ou\\nqualquer outra coisa do g\\xEAnero, al\\xE9m de deixar o c\\xF3digo extremamente sem\\xE2ntico.\"), mdx(\"p\", null, \"Para isso, basta definir a propriedade \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"grid-template-areas\"), \" como um\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"template\"), \" do itens do \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"container\"), \" e em seguida \\\"linkar\\\" as defini\\xE7\\xF5es desse\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"template\"), \" dentro de cada item como a propriedade \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"grid-area\"), \".\"), mdx(\"p\", null, \"Veja a seguinte estrutura HTML:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<div class=\\\"page\\\">\\n  <div class=\\\"item header\\\">Header</div>\\n  <div class=\\\"item menu\\\">Menu</div>\\n  <div class=\\\"item main\\\">Main</div>\\n  <div class=\\\"item right\\\">Right</div>\\n  <div class=\\\"item footer\\\">Footer</div>\\n</div>\\n\")), mdx(\"p\", null, \"E a seguinte defini\\xE7\\xE3o CSS:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-css\"\n  }), \".page {  \\n  grid-template-areas:\\n    'header header header header header header'\\n    'menu main main main right right'  \\n    'menu footer footer footer footer footer';\\n}\\n\\n.header { grid-area: header; }\\n.menu { grid-area: menu; }\\n.main { grid-area: main; }\\n.right { grid-area: right; }\\n.footer { grid-area: footer; }\\n\")), mdx(\"p\", null, \"Agora veja o resultado no CodePen:\"), mdx(\"iframe\", {\n    src: \"https://codepen.io/theuves/embed/ZVdVGP?default-tab=css,result\"\n  }), mdx(\"h2\", null, \"Mais informa\\xE7\\xF5es\"), mdx(\"p\", null, \"Isso tudo \\xE9 o b\\xE1sico que pude colocar em um artigo de r\\xE1pida leitura. Caso voc\\xEA\\nqueira se aprofundar na tecnologia, poder\\xE1 ver a documenta\\xE7\\xE3o da\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout\"\n  }), \"Mozilla\"), \" ou\\nda \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.w3schools.com/css/css_grid.asp\"\n  }), \"W3Schools\"), \" (ambos em ingl\\xEAs).\\nH\\xE1 tamb\\xE9m um artigo interessante no CSS-Tricks chamado\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://css-tricks.com/snippets/css/complete-guide-grid/\"\n  }), mdx(\"em\", {\n    parentName: \"a\"\n  }, \"A Complete Guide to Grid\")), \"\\n(em ingl\\xEAs tamb\\xE9m) que voc\\xEA pode dar uma conferida para estudar um pouco mais.\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>O CSS Grid Layout é uma tecnologia do CSS que\n<a href=\"https://caniuse.com/#feat=css-grid\">desde 2017</a> está presente na maioria dos\nprincipais navegadores modernos. Ela nos permite criar <em>layouts</em> baseados em\n<em>grids</em> de uma forma extremamente rápida, fácil e... padronizada. Apresentarei\nrapidamente nesse artigo um pouco das principais coisas que você pode fazer\ncom essa <em>feature</em>.</p><h2>Introdução</h2><p>Não há segredo algum para dar início a um elemento simples. Para isso basta\ncriar uma estrutura HTML com um <em>container</em> e alguns itens que farão parte do\n<em>layout</em>. Veja uma estrutura bem simples para começar:</p><pre><code class=\"language-html\">&lt;div class=&quot;grid&quot;&gt;\n  &lt;div class=&quot;item item-1&quot;&gt;Item 1&lt;/div&gt;\n  &lt;div class=&quot;item item-2&quot;&gt;Item 2&lt;/div&gt;\n  &lt;div class=&quot;item item-3&quot;&gt;Item 3&lt;/div&gt;\n  &lt;div class=&quot;item item-4&quot;&gt;Item 4&lt;/div&gt;\n  &lt;div class=&quot;item item-5&quot;&gt;Item 5&lt;/div&gt;\n  &lt;div class=&quot;item item-6&quot;&gt;Item 6&lt;/div&gt;\n&lt;/div&gt;\n</code></pre><p>Após isso, você terá duas opções para fazer com que o elemento <code>.grid</code> seja\numa <em>grid</em>: ou você usa <code>display: grid</code> ou <code>display: inline-grid</code>. A diferença\nentre essas duas opções, pode-se dizer, que é a mesma entre <code>block</code> e\n<code>inline-block</code>.</p><p>Para o exemplo usaremos somente <code>display: grid</code>.</p><pre><code class=\"language-css\">.grid {\n  display: grid;\n}\n</code></pre><p>Veja o resultado:</p><iframe src=\"https://codepen.io/theuves/embed/wRLZap?default-tab=css,result\"></iframe><h2>Configuração básica do <em>container</em></h2><p>Se você olhou o resultado do código anterior, percebeu que não houve nada de\ninteressante. Pelo contrário, tudo ficou como se você tivesse definido um\nsimples <code>display: block</code>, visto que todos os itens ficaram um embaixo do outro\nsem nenhuma coluna definida – posto que esse é o principal objetivo do CSS Grid\nLayout.</p><p>Para que possamos montar a nossa <em>grid</em>, antes devemos definir qual será o seu\nformato, por exemplo: 3 colunas × 2 linhas – que é o que será usado nesse\nexemplo. Depois disso, usa-se a propriedade <code>grid-template-columns</code> para\ndefinir a quantidade de colunas e a largura de cada uma delas e\nconsequentemente fazer a quebra de linhas que é automática.</p><pre><code class=\"language-css\">.grid {\n  display: grid;\n  grid-template-columns: 100px 200px 300px;\n}\n</code></pre><p>Isso é bem intuitivo, onde percebe-se facilmente que haverá três colunas e que\nelas terão, respectivamente, 100px, 200px e 300px. Veja o exemplo no CodePen:</p><iframe src=\"https://codepen.io/theuves/embed/yGdrJZ?default-tab=css,result\"></iframe><p>No entanto, se você quisesse colunas com larguras iguais, relativas à largura\ndo <em>container</em> (onde, consequentemente, cada coluna teria cerca de 33,3% de\nlargura), bastaria adicionar a propriedade <code>auto</code> para todas, ficando:</p><pre><code class=\"language-css\">.grid {\n  display: grid;\n  grid-template-columns: auto auto auto;\n}\n</code></pre><blockquote><p><strong>DICA:</strong> Quando você tiver um caso como esse, no CSS Grid, você terá a\npossibilidade de utilizar a função <code>repeat()</code> e economizar algumas dedadas no\nteclado, além de deixar o código mais atraente. Nesse caso em específico\npoderiamos ter usado <code>repeat(3, auto)</code>. Veja mais sobre essa função no\n<!-- -->[MDN web docs][mdn_repeat]<!-- --> (em inglês).</p></blockquote><p>Se tem <code>grid-template-columns</code>, certamente deveria ter também\n<code>grid-template-rows</code>. E tem! Com essa propriedade você basicamente definirá\na altura de suas linhas. Sem segredos: é o mesmo sistema das colunas.</p><h2>Configuração básica dos itens</h2><p>Agora que foi apresentado algumas configurações para o <em>container</em> que abrigará\nos itens, é importante saber qual configuração os itens podem ter. As\npropriedades existentes para os itens do CSS Grid Layout se resumem\nsimplesmente em definições para a localização e o espaço ocupado por eles.\nDesse modo, por exemplo, você pode fazer com um que um item ocupe o espaço de\noutros itens também, permitindo, assim, que você não fique preso apenas à\n<em>containers</em> quadriculados.</p><p>Para isso temos as seguintes propriedades:</p><ul><li><code>grid-row-start</code> - que recebe a linha vertical em que deve iniciar,</li><li><code>grid-row-end</code> - que recebe a linha vertical em que deve acabar,</li><li><code>grid-column-start</code> - que recebe a linha horizontal em que deve iniciar e</li><li><code>grid-column-end</code>- que recebe a linha horizontal em que deve acabar.</li></ul><blockquote><p><strong>DICA:</strong> Há algumas formas abreviadas para tudo isso. Você pode usar somente\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row\"><code>grid-row</code></a> ou\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column\"><code>grid-column</code></a> e\nreceber dois valores de <code>*-start</code> e <code>*-end</code> respectivamente. Ou você também pode\nusar <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-area\"><code>grid-area</code></a>\nque recebe respectivamente: <code>*-row-start</code>, <code>*-column-start</code>, <code>*-row-end</code> e\n<code>*-column-end</code> separados por uma barra (<code>/</code>). Você pode entender melhor o\nfuncionamento desses atalhos clicandos nos <em>links</em> e lendo a documentação\ndetalhada de cada um (em inglês).</p></blockquote><p>Veja um exemplo simples do que essas propriedades podem fazer:</p><iframe src=\"https://codepen.io/theuves/embed/oJrRWq?default-tab=css,result\"></iframe><p>Observe que o <em>style</em> que define o comportamento do item 1 é:</p><pre><code class=\"language-css\">.item.item-1 {\n  grid-row-start: 1;\n  grid-row-end: 3;\n}\n</code></pre><p>Um código como esse pode ser um pouco contra-intuitivo, pois veja que o\n<code>grid-row-end</code> é 3 enquanto só temos 2 linhas e não 3. Isso ocorre pois o valor\nrecebido por essas propriedades não se referem à linha DE cada item e sim à\nlinha ENTRE cada item. Veja a ilustração abaixo para entender o funcionamento\ndesses tipos de linha:</p><p><img src=\"https://i.imgur.com/NccapEu.png\" alt=\"IFuncionamento das linhas\"/></p><p>Desse modo, o código do exemplo mais acima inicia entre a borda e o começo da\nlinha do item 1 e termina no final da linha do item 2.</p><blockquote><p><strong>DICA</strong>: Para facilitar o entendimento de um código como esse, poderiamos\nter simplesmente usado <code>span</code> antes da linha do item. Por exemplo:\n<code>grid-row-end: span 2</code>. Isso deixaria mais claro que deveria terminar na linha\n2 dos itens.</p></blockquote><h2>Distância entre itens</h2><p>Se você prestou atenção no último exemplo de código no CodePen, viu que há um\nespaço entre os itens, certo?! Para distanciar um item de outro, você\nintuitivamente poderia pensar em usar <code>margin</code> dentro deles, porém, essa não\nseria a melhor solução para o problema. O CSS oferece as seguintes propriedades\npara fazer isso padronizadamente:</p><ul><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-column-gap\"><code>grid-column-gap</code></a> - que distancia os itens das colunas</li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-row-gap\"><code>grid-row-gap</code></a> - que distancia os itens das linhas e</li><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/grid-gap\"><code>grid-gap</code></a> - que é uma forma abreviada dos outros.</li></ul><p>Observe que essas propriedades devem ser definidas dentro do <em>container</em> e não\ndentro dos itens. Além disso, tenha em mente que <code>grid-gap</code> pode receber um\núnico valor que será usado tanto para a coluna quanto para a linha ou pode receber dois valores: um para a linha e outro para a coluna, respectivamente.</p><h2>Alinhamento de itens</h2><p>O CSS também nos dá a possibilidade de alinhar os itens\n<strong>dentro do <em>container</em></strong>, tendo as propriedades <code>justify-content</code> (para o\nalinhamento horizontal dos itens) e <code>align-content</code> (para o alinhamento\nvertical dos itens). Contudo, essas propriedades não são exclusivas do CSS Grid\nLayout. Veja no <em>MDN web docs</em> a documentação delas e tenha uma experiência\ninterativa do que cada valor pode fazer, acessando\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content\">aqui</a>\n(para <code>justify-content</code>) e\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/align-content\">aqui</a>\n(para <code>align-content</code>).</p><h2>Nomeando itens</h2><p>Essa, sem dúvidas, é a parte mais interessante do CSS Grid Layout, no qual,\npodemos nomear cada item e fazê-los se posicionarem automaticamente no\n<em>container</em>, sem a necessidade de configurar <code>grid-row</code>, <code>grid-column</code> ou\nqualquer outra coisa do gênero, além de deixar o código extremamente semântico.</p><p>Para isso, basta definir a propriedade <code>grid-template-areas</code> como um\n<em>template</em> do itens do <em>container</em> e em seguida &quot;linkar&quot; as definições desse\n<em>template</em> dentro de cada item como a propriedade <code>grid-area</code>.</p><p>Veja a seguinte estrutura HTML:</p><pre><code class=\"language-html\">&lt;div class=&quot;page&quot;&gt;\n  &lt;div class=&quot;item header&quot;&gt;Header&lt;/div&gt;\n  &lt;div class=&quot;item menu&quot;&gt;Menu&lt;/div&gt;\n  &lt;div class=&quot;item main&quot;&gt;Main&lt;/div&gt;\n  &lt;div class=&quot;item right&quot;&gt;Right&lt;/div&gt;\n  &lt;div class=&quot;item footer&quot;&gt;Footer&lt;/div&gt;\n&lt;/div&gt;\n</code></pre><p>E a seguinte definição CSS:</p><pre><code class=\"language-css\">.page {  \n  grid-template-areas:\n    &#x27;header header header header header header&#x27;\n    &#x27;menu main main main right right&#x27;  \n    &#x27;menu footer footer footer footer footer&#x27;;\n}\n\n.header { grid-area: header; }\n.menu { grid-area: menu; }\n.main { grid-area: main; }\n.right { grid-area: right; }\n.footer { grid-area: footer; }\n</code></pre><p>Agora veja o resultado no CodePen:</p><iframe src=\"https://codepen.io/theuves/embed/ZVdVGP?default-tab=css,result\"></iframe><h2>Mais informações</h2><p>Isso tudo é o básico que pude colocar em um artigo de rápida leitura. Caso você\nqueira se aprofundar na tecnologia, poderá ver a documentação da\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout\">Mozilla</a> ou\nda <a href=\"https://www.w3schools.com/css/css_grid.asp\">W3Schools</a> (ambos em inglês).\nHá também um artigo interessante no CSS-Tricks chamado\n<a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\"><em>A Complete Guide to Grid</em></a>\n(em inglês também) que você pode dar uma conferida para estudar um pouco mais.</p>","scope":{"title":"Um pouco sobre CSS Grid Layout","date":"2019-01-19"}},"frontMatter":{"title":"Um pouco sobre CSS Grid Layout","date":"2019-01-19"}},"__N_SSG":true}